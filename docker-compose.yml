version: "3"
services:
#=============mysql=============
 mysql:
   build: ${SERVICE_DIR}/mysql
   container_name: mysql
   ports:
     - "${MYSQL_HOST_PORT}:3306"
   volumes:
     - ${SERVICE_DIR}/mysql/my.cnf:/etc/my.cnf:rw
     - ${DATA_DIR}/mysql:/var/lib/mysql:rw
     - ${LOG_DIR}/mysql:/var/log/mysql:rw
     # 数据库还原目录 可将需要还原的sql文件放在这里
     # - ./mysql/init.sql:/docker-entrypoint-initdb.d/
   environment:
     - MYSQL_DATABASE=${MYSQL_DATABASE}
     - MYSQL_USER=${MYSQL_USER}
     - MYSQL_PASSWORD=${MYSQL_PASSWORD}
     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
     - TZ=${WORKSPACE_TIMEZONE}
   restart: always
   command:
     - --character-set-server=utf8mb4
     - --collation-server=utf8mb4_unicode_ci
   networks:
     - backend

#=============redis=============
 redis:
   #image: redis:${REDIS_VERSION}
   build: ${SERVICE_DIR}/redis
   container_name: redis
   ports:
     - "${REDIS_HOST_PORT}:6379"
   volumes:
     - ${SERVICE_DIR}/redis/redis.conf:/usr/local/etc/redis/redis.conf:rw #没啥意义吧 dockerfile已经copy了
     - ${DATA_DIR}/redis:/data:rw
   #      - ${LOG_DIR}/redis:/var/log/redis:rw 没有log
   restart: always
   networks:
     - backend



#=============nginx=============
 nginx:
   build:
     context: ${SERVICE_DIR}/nginx
     # args:
     #   NGINX_VERSION: nginx:${NGINX_VERSION}
   container_name: nginx
   ports:
     - "${NGINX_HOST_HTTP_PORT}:80"
     - "${NGINX_HOST_HTTPS_PORT}:443"
   volumes:
     - ${CODE_DIR}:/var/www/html:rw
     - ${LOG_DIR}/nginx:/var/log/nginx:rw
     - ${SERVICE_DIR}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
     - ${SERVICE_DIR}/nginx/conf.d:/etc/nginx/conf.d:rw
   restart: always
   networks:
     - frontend

#=============php=============
 php:
   build:
     context: ${SERVICE_DIR}/php
     # args:
     #   TZ: "$TZ"
   container_name: php
   expose:
     - 9501
   extra_hosts:
     - "www.site1.com:172.17.0.1"
   volumes:
     - ${CODE_DIR}:/var/www/html:rw
     - ${LOG_DIR}/php:/var/log/php:rw
     - ${SERVICE_DIR}/php/php.ini:/usr/local/etc/php/php.ini:rw
   restart: always
   networks:
     - frontend
     - backend

#=============consul集群=============http://localhost:8500
 consul1:
   image: consul
   container_name: node1
   command: agent -server -bootstrap-expect=3 -node=node1 -client=0.0.0.0 -datacenter=dc1
   networks:
     - backend
 consul2:
   image: consul
   container_name: node2
   command: agent -server -retry-join=node1 -node=node2 -client=0.0.0.0 -datacenter=dc1
   networks:
     - backend
 consul3:
   image: consul
   container_name: node3
   command: agent -server -retry-join=node1 -node=node3 -client=0.0.0.0 -datacenter=dc1
   networks:
     - backend
 consul4:
   image: consul
   container_name: node4
   command: agent -ui -retry-join=node1 -node=ndoe4 -client=0.0.0.0 -datacenter=dc1
   ports:
     - 8500:8500
   networks:
     - backend

#=============zookeeper集群=============
 zoo1:
    image: zookeeper
    restart: always
    hostname: zoo1
    volumes:
      - ${DATA_DIR}/zookeeper/data1:/data:rw
      - ${DATA_DIR}/zookeeper/datalog1:/datalog:rw
      - ${LOG_DIR}/zookeeper/logs1:/logs:rw
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
    networks:
      - backend
 zoo2:
    image: zookeeper
    restart: always
    hostname: zoo2
    volumes:
      - ${DATA_DIR}/zookeeper/data2:/data:rw
      - ${DATA_DIR}/zookeeper/datalog2:/datalog:rw
      - ${LOG_DIR}/zookeeper/logs2:/logs:rw
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181
    networks:
      - backend
 zoo3:
    image: zookeeper
    restart: always
    hostname: zoo3
    volumes:
      - ${DATA_DIR}/zookeeper/data3:/data:rw
      - ${DATA_DIR}/zookeeper/datalog3:/datalog:rw
      - ${LOG_DIR}/zookeeper/logs3:/logs:rw
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
    networks:
      - backend

#=============kafka集群=============
 kafka1:
   image: wurstmeister/kafka
   ports:
     - "9092:9092"
   environment:
     KAFKA_LOG_DIRS: /kafka
     KAFKA_BROKER_ID: 1
     KAFKA_CREATE_TOPICS: test:6:1
     KAFKA_ADVERTISED_HOST_NAME: 192.168.0.1
     KAFKA_ADVERTISED_PORT: 9092
     KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
 kafka2:
   image: wurstmeister/kafka
   ports:
     - "9093:9092"
   environment:
     KAFKA_LOG_DIRS: /kafka
     KAFKA_BROKER_ID: 2
     KAFKA_ADVERTISED_HOST_NAME: 192.168.0.1
     KAFKA_ADVERTISED_PORT: 9093
     KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
 kafka3:
   image: wurstmeister/kafka
   ports:
     - "9094:9092"
   environment:
     KAFKA_LOG_DIRS: /kafka
     KAFKA_BROKER_ID: 3
     KAFKA_ADVERTISED_HOST_NAME: 192.168.0.1
     KAFKA_ADVERTISED_PORT: 9094
     KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181

#=============rabbitmq=============
 rabbitmq:
   image: rabbitmq:latest
   container_name: rabbitmq
   restart: always
   ports:
     - "${RABBITMQ_HOST_PORT_C}:5672"
     - "${RABBITMQ_HOST_PORT_S}:15672"
   environment:
      TZ: "$TZ"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
   networks:
         - default

networks:
  frontend:
  backend: